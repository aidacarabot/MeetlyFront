import { Button } from "../../components/Button/Button";
import { Events } from "../../components/Events/Events";
import { routes } from "../../routes/routes";
import { createPage } from "../../utils/functions/createPage";
import "./Hero.css";

//! Funci√≥n que crea el t√≠tulo y la descripci√≥n de la p√°gina Hero.
const createHeroHeader = () => {
  const fragment = document.createDocumentFragment(); //? Creamos un fragmento para agrupar m√∫ltiples nodos. Un DocumentFragment es un contenedor especial en JavaScript que te permite almacenar y organizar nodos del DOM (elementos como div, p, etc.) antes de insertarlos en el documento. Es como un ‚Äúlienzo invisible‚Äù en el que puedes construir una estructura de elementos sin que estos afecten directamente al DOM visible mientras los est√°s creando. Cuando est√°s listo, puedes a√±adir el fragmento al DOM con todos sus elementos, y este proceso es m√°s eficiente que insertar cada elemento individualmente.

   //! Creamos el contenedor principal que agrupa title-description y botones.
   const heroHeaderContainer = document.createElement("div");
   heroHeaderContainer.className = "hero-header-container"; // Clase para el contenedor.

  const titleDescription = document.createElement("div");
  titleDescription.className = "title-description-div";

  const h1 = document.createElement("h1"); // Creamos el t√≠tulo principal.
  h1.textContent = "Meetly"; // Establecemos el texto del t√≠tulo.

  const description = document.createElement("p"); // Creamos una descripci√≥n para la p√°gina.
  description.textContent = "¬øAburrido de no saber qu√© hacer? Aqu√≠ encontrar√°s los eventos m√°s chulos cerca de ti: conciertos, expos, talleres y planes que te sacan de la rutina. Explora, ap√∫ntate con un clic y vive nuevas experiencias mientras conoces gente con tus mismos intereses. Porque los mejores recuerdos empiezan con un buen plan. ¬øTe apuntas? üéâ"; // A√±adimos el texto descriptivo.
  description.className = "description-hero";

  titleDescription.append(h1, description);

  //! Contenedor de botones (llamada a funci√≥n).
  const buttonContainer = createLoginRegisterButtons();

  //! A√±adimos los contenedores al contenedor principal.
  heroHeaderContainer.append(titleDescription, buttonContainer);

  //! A√±adimos el contenedor principal al fragmento.
  fragment.append(heroHeaderContainer);

  return fragment; // Devolvemos el fragmento con los elementos agrupados.
};

//! Funci√≥n que crea los botones de inicio de sesi√≥n y registro.
const createLoginRegisterButtons = () => {
  const buttonContainer = document.createElement("div"); // Creamos un contenedor para los botones.
  buttonContainer.className = "button-container"; // A√±adimos una clase CSS para estilos.
  buttonContainer.id = "login-register-buttons"; // Asignamos un ID para facilitar su referencia.

  // Buscamos las rutas de inicio de sesi√≥n y registro dentro de las rutas definidas.
  const loginRoute = routes.find((route) => route.path === "/login");
  const registerRoute = routes.find((route) => route.path === "/register");

  //! Bot√≥n de "Iniciar Sesi√≥n"
  const loginButton = Button(
    loginRoute.text,           // Texto: "Iniciar Sesi√≥n".
    "btn-login-register",      // Clase principal del bot√≥n.
    () => window.navigateTo("/login"), // Acci√≥n al hacer clic.
    "",                        // ID opcional (vac√≠o en este caso).
    true,                      // Indicamos que queremos usar un `span`.
    "button-top-hero-span"     // Clase espec√≠fica para el span.
  );

  //! Bot√≥n de "Registrarse"
  const registerButton = Button(
    registerRoute.text, 
    "btn-login-register", 
    () => window.navigateTo("/register"),
    "", 
    true, 
    "button-top-hero-span"     // Clase espec√≠fica para el span.
  );

  //? A√±adimos ambos botones al contenedor.
  buttonContainer.append(loginButton, registerButton);
  return buttonContainer; // Devolvemos el contenedor con los botones.
};

//! Funci√≥n que crea un bot√≥n para acceder a m√°s eventos.
const createAccessAllEventsButton = () => {
  return Button(
    "Inicia Sesi√≥n Para Acceder A Todos Ellos!", // Texto del bot√≥n que invita al usuario a iniciar sesi√≥n.
    "btn-access-all", // Clase CSS para estilizar el bot√≥n.
    () => {
      // Acci√≥n al hacer clic en el bot√≥n: desplazarse al inicio de la p√°gina.
      window.scrollTo({ top: 0, behavior: "smooth" }); // Redirige al inicio con desplazamiento suave.
    }
  );
};

//! Funci√≥n principal para renderizar la p√°gina Hero.
export const Hero = () => {
  const heroDiv = createPage("hero");

  heroDiv.appendChild(createHeroHeader()); // T√≠tulo y descripci√≥n.

  // Renderizamos una lista de eventos como carrusel.
  Events(heroDiv, { title: "Echa un vistazo a algunos de los eventos disponibles:" }, true);

  heroDiv.appendChild(createAccessAllEventsButton()); // Bot√≥n de acceso a eventos.

  return heroDiv; // Devolvemos el contenedor completo para que sea renderizado en la aplicaci√≥n.
};